name: Build ImmortalWrt

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:
jobs:
  build:
    runs-on: ubuntu-22.04
    env:
      GIT_ACTOR: ${{github.actor}}
      GIT_REPOSITORY: ${{github.repository}}
      RUN_NUMBER: ${{github.run_number}}
      RUN_WORKFLOW: ${{github.workflow}}
      REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
      TZ: Asia/Shanghai


    steps:
      - name: 密匙检测（密匙为空则退出）
        run: |
          cd ${GITHUB_WORKSPACE}
          if [[ -n "${{ env.REPO_TOKEN }}" ]]; then
            echo "密匙检测通过，继续执行"
          elif [[ -z "${{ env.REPO_TOKEN }}" ]]; then
            echo "您没有设置仓库密匙，请按教程设置好密匙再来"
            exit 1
          fi
      # 检出代码
      - name: Checkout code
        uses: actions/checkout@v4

      # 清理磁盘空间
      # - name: Free up disk space
      #   run: |
      #     sudo apt-get clean
      #     sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc
      #     df -h
      - name: 释放Ubuntu磁盘空间
        uses: endersonmenezes/free-disk-space@v2
        with:
          remove_android: true
          remove_dotnet: true
          remove_haskell: true
          remove_tool_cache: true
          remove_swap: true
          remove_packages: "azure-cli google-cloud-cli microsoft-edge-stable google-chrome-stable firefox postgresql* temurin-* *llvm* mysql* dotnet-sdk-*"
          remove_packages_one_command: true
          remove_folders: "/usr/share/swift /usr/share/miniconda /usr/share/az* /usr/share/glade* /usr/local/lib/node_modules /usr/local/share/chromium /usr/local/share/powershell"
          testing: false
        


      - name: 部署编译环境
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          # sudo -E apt-get -qq update -y
          # sudo -E apt-get -qq install -y gawk git gettext libssl-dev xsltproc zip git-core wget curl grep python2.7 python3 python3-pip libpython3-dev
          # sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /${{ env.DIY_WORK }}
          sudo chown $USER:$GROUPS /${{ env.DIY_WORK }}
          bash shells/ubuntu.sh 
          
      # # 启动 tmate 会话
      # - name: Start tmate session
      #   run: |
      #     tmate -S /tmp/tmate.sock new-session -d
      #     tmate -S /tmp/tmate.sock wait tmate-ready
      #     echo "SSH connection: $(tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}')"
      #     echo "Web connection: $(tmate -S /tmp/tmate.sock display -p '#{tmate_web}')"

      # 设置 ImmortalWrt
      - name: Build openwrt
        run: |
          git clone https://github.com/immortalwrt/immortalwrt.git
          cd immortalwrt
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      # 应用上次编译的配置
      - name: 应用上次编译的配置
        run: |
          cd immortalwrt
          if [ -f ../saved_artifacts/config.txt ]; then
            cp ../saved_artifacts/config.txt .config
            make defconfig
            echo "已成功应用上次编译的配置"
          else
            echo "未找到上次编译的配置文件，跳过此步骤"
          fi
      - name: 设置自定义 LAN IP
        env:
          CUSTOM_LAN_IP: 192.168.10.1
        run: |
            cd immortalwrt
            sed -i "s/192.168.1.1/${{ env.CUSTOM_LAN_IP }}/g" package/base-files/files/bin/config_generate
            echo "已将默认 LAN IP 修改为 ${{ env.CUSTOM_LAN_IP }}"

      - name: SSH远程连接（make menuconfig）
        uses: danshui-git/debugger-action@main

      # # 输出 tmate 连接信息
      # - name: Output tmate connection info
      #   run: |
      #     cd openwrt
      #     echo "SSH connection: $(tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}')"
      #     echo "Web connection: $(tmate -S /tmp/tmate.sock display -p '#{tmate_web}')"

      # # 等待用户完成 tmate 会话
      # - name: Wait for tmate session to complete
      #   run: |
      #     echo "Waiting for tmate session to complete. Please disconnect from the session to continue."
      #     tmate -S /tmp/tmate.sock wait tmate-exit
      - name: 上传配置文件在 Github Artifacts
        uses: actions/upload-artifact@main
        with:
          name: .config_${{ env.SOURCE }}_${{ env.LUCI_EDITION }}_${{ env.TARGET_PROFILE }}_${{ env.Firmware_Date }}
          path: immortalwrt/build_logo/config.txt
        
      # 编译 ImmortalWrt
      - name: Build ImmortalWrt
        run: |
          cd immortalwrt
          make -j1 V=s

      # 打包固件
      - name: Package firmware
        run: |
          cd immortalwrt/bin/targets
          tar -czf firmware.tar.gz *

      # 上传固件到 Github Artifacts
      - name: 上传固件到 Github Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: firmware
          path: immortalwrt/bin/targets/firmware.tar.gz

      - name: 发布固件
        uses: ncipollo/release-action@v1
        with:
          name: ${{ env.SOURCE }}-${{ env.PROMPT_TING }}
          tag: a${{ env.date }}
          token: ${{ secrets.REPO_TOKEN }}
          allowUpdates: true
          body: ${{ env.Tongzhi_Date }}
          artifacts: "${{ env.FIRMWARE_PATH }}/*"

# 保存生成的文件到仓库
      - name: 保存生成的文件到仓库
        run: |
          git config --global user.name "${{ env.GIT_ACTOR }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git checkout -b artifacts || git switch artifacts
          mkdir -p saved_artifacts
          cp immortalwrt/build_logo/config.txt saved_artifacts/
          cp immortalwrt/bin/targets/firmware.tar.gz saved_artifacts/
          git add saved_artifacts/
          git commit -m "保存编译文件: 配置文件和固件"
          git push origin artifacts